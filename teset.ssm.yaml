image: maven:3.3.9-jdk-8

variables:
  GITHUB_REPO: "git@github.com:DoosanICA/db-irw.git"
  REPOSITORY_NAME: "db-irw"
  DEFAULT_BRANCH:
    value: "develop"
    description: "Enter the branch name"
  DependecyCheckRequired:
    description: "Select the option"
    value: "true"  # Default value
    options:
      - "flase"
      - "true"
  SonarQubeScanner:
    description: "Select the option"
    value: "true"  # Default value
    options:
      - "flase"
      - "true"
  Checkmarx:
    description: "Select the option"
    value: "true"  # Default value
    options:
      - "flase"
      - "true"
  MAVEN_SETTINGS_PATH: /home/gitlab-runner/maven-settings-files/twms-bobcat-irw-setting.xml -U clean install -Dmaven.test.skip=true
  MAVEN_REPO_LOCAL: /home/gitlab-runner/maven-settings-files/twms_bobcat_irw
  DEPENDENCY_CHECK_VERSION: "8.0.0"
  SONARQUBE_SCANNER_VERSION: "3.2.0"
  SONARQUBE_SERVER_URL: "https://your.sonarqube.server"
  SONARQUBE_PROJECT_KEY: "TWMS-Bobcat-IRW"
  SONARQUBE_TOKEN: "your-sonarqube-token"
  CHECKMARX_SERVER_URL: "https://cxscan.tavant.com/"
  CHECKMARX_REPOSITORY_NAME: "TWMS-Bobcat-IRW-SonarQubeScan"
  CHECKMARX_TEAM: "\\CxServer"
  CHECKMARX_PRESET: "Checkmarx Default"
  EXCLUDE_PATTERNS: "!**/_cvs/**/*, !**/.svn/**/*, !**/.hg/**/*, !**/.git/**/*, !**/.bzr/**/*,
        !**/.gitgnore/**/*, !**/.gradle/**/*, !**/.checkstyle/**/*, !**/.classpath/**/*, !**/bin/**/*,
        !**/obj/**/*, !**/backup/**/*, !**/.idea/**/*, !**/*.DS_Store, !**/*.ipr, !**/*.iws,
        !**/*.bak, !**/*.tmp, !**/*.aac, !**/*.aif, !**/*.iff, !**/*.m3u, !**/*.mid, !**/*.mp3,
        !**/*.mpa, !**/*.ra, !**/*.wav, !**/*.wma, !**/*.3g2, !**/*.3gp, !**/*.asf, !**/*.asx,
        !**/*.avi, !**/*.flv, !**/*.mov, !**/*.mp4, !**/*.mpg, !**/*.rm, !**/*.swf, !**/*.vob,
        !**/*.wmv, !**/*.bmp, !**/*.gif, !**/*.jpg, !**/*.png, !**/*.psd, !**/*.tif, !**/*.swf,
        !**/*.jar, !**/*.zip, !**/*.rar, !**/*.exe, !**/*.dll, !**/*.pdb, !**/*.7z, !**/*.gz,
        !**/*.tar.gz, !**/*.tar, !**/*.gz, !**/*.ahtm, !**/*.ahtml, !**/*.fhtml, !**/*.hdm,
        !**/*.hdml, !**/*.hsql, !**/*.ht, !**/*.hta, !**/*.htc, !**/*.htd, !**/*.war, !**/*.ear,
        !**/*.htmls, !**/*.ihtml, !**/*.mht, !**/*.mhtm, !**/*.mhtml, !**/*.ssi, !**/*.stm,
        !**/*.bin,!**/*.lock,!**/*.svg,!**/*.obj,
        !**/*.stml, !**/*.ttml, !**/*.txn, !**/*.xhtm, !**/*.xhtml, !**/*.class, !**/*.iml, !Checkmarx/Reports/*.*,
        !OSADependencies.json, !**/node_modules/**/*
        !**/help/**/*, !**/vendor/**/*, !**/*.bat, !**/*.vm, !**/*.properties, !**/*.jrxml, !**/*.jasper, !**/*.xsl, !**/dbpatches/**/*"
        
stages:
  - clone
  - dependency-check
  - sonar-analysis
  - checkmarx-scan


clone_job:
  stage: clone
  tags:
    - Linux
  before_script:
    - |
      mkdir -p ~/.ssh
      echo "$SSH_PRIVATE_KEY" | tr -d '\r' > ~/.ssh/id_rsa
      chmod 600 ~/.ssh/id_rsa
      ssh-keyscan -H github.com >> ~/.ssh/known_hosts
      ssh -T git@github.com || true
 
  script:
    - git clone --branch $DEFAULT_BRANCH $GITHUB_REPO
    - cp dijit.sh $REPOSITORY_NAME/
    - cd $REPOSITORY_NAME
    - chmod +x *.sh
    - export GIT_COMMIT=$(git rev-parse HEAD)  # Get latest commit hash from the cloned repository
    - echo "Revision:$GIT_COMMIT"  
    #Build
    # - mvn -s $MAVEN_SETTINGS_PATH -Dmaven.repo.local=$MAVEN_REPO_LOCAL -f integration/bods/pom.xml
    # - mvn -s $MAVEN_SETTINGS_PATH -Dmaven.repo.local=$MAVEN_REPO_LOCAL -f integration/server/pom.xml
    # - mvn -s $MAVEN_SETTINGS_PATH -Dmaven.repo.local=$MAVEN_REPO_LOCAL -DbuildNumber=${CI_COMMIT_SHA} -DreleaseVersion=${RELEASE_VERSION} -P dailyqabuild
    
    #Dependency Check
    - |
      if [ "${DependecyCheckRequired}" == "true" ]; then
        echo "Downloading Dependency-Check version ${DEPENDENCY_CHECK_VERSION}..."
        curl -LO "https://github.com/jeremylong/DependencyCheck/releases/download/v${DEPENDENCY_CHECK_VERSION}/dependency-check-${DEPENDENCY_CHECK_VERSION}-release.zip"
        
        echo "Extracting Dependency-Check..."
        unzip "dependency-check-${DEPENDENCY_CHECK_VERSION}-release.zip" -d dependency-check
        ls -l
        echo "Running Dependency-Check for project ${REPOSITORY_NAME}..."
        
        # Define the output directory
        OUTPUT_DIR="dependency-check-report-$(date '+%Y%m%d%H%M%S')"
        mkdir -p "$OUTPUT_DIR"  # Ensure the directory exists
        ls -l
        dotnet --version
        ./dependency-check/dependency-check/bin/dependency-check.sh --version
        pwd
        ./dijit.sh
        pwd
        
        ./dependency-check/dependency-check/bin/dependency-check.sh --project "${REPOSITORY_NAME}" --scan "./" --format "XML" --out "." \
          --disableOssIndex true --disableArchive true --exclude "**/*.dll" --exclude "**/*.exe" --log dependency-check.log

        ls -l
      else
        echo "Dependency Check not required, skipping..."
      fi


  artifacts:
    paths:
      - "$REPOSITORY_NAME/dependency-check-report.xml"  
    when: always


# sonar-analysis:
#   stage: sonar-analysis
#   script:
#     - |
#       mvn sonar:sonar \
#         -Dsonar.projectKey=$SONARQUBE_PROJECT_KEY \
#         -Dsonar.projectName="TWMS-Bobcat-IRW" \
#         -Dsonar.projectVersion="1.0" \
#         -Dsonar.sources="annotations,common,common-test,dbpatches,domain,engine,etc,functional,integration,java/tavant/twms/web/print,misc,process,seeddata,unittest,webapp" \
#         -Dsonar.java.binaries="**/classes" \
#         -Dsonar.sourceEncoding="UTF-8" \
#         -Dsonar.exclusions="**/help/**/*,**/vendor/**/*,**/*.bat,**/*.vm,**/*.properties,**/*.jrxml,**/*.jasper,**/*.xls,**/dbpatches/**/*,**/target/**/*,**/*.mp4,**/*.css,**/*.js" \
#         -Dsonar.host.url=$SONARQUBE_SERVER_URL \
#         -Dsonar.login=$SONARQUBE_TOKEN

checkmarx-scan:
  stage: checkmarx-scan
  script:
    - |
      curl -X POST "$CHECKMARX_SERVER_URL/api/scans" \
        -H "Authorization: Bearer YOUR_API_TOKEN" \
        -H "Content-Type: application/json" \
        -d '{
              "project": "$CHECKMARX_REPOSITORY_NAME",
              "team": "$CHECKMARX_TEAM",
              "settings": { "sast": true }
            }'


scan:
  stage: scan
  script:
    - echo "Starting Checkmarx Scan"
    - |
      curl -X POST "${CHECKMARX_SERVER_URL}/sast/scan" \
        -H "Authorization: Bearer ${CHECKMARX_TOKEN}" \
        -H "Content-Type: application/json" \
        -d '{
              "project": "'${CHECKMARX_REPOSITORY_NAME}'",
              "team": "'${CHECKMARX_TEAM}'",
              "preset": "'${CHECKMARX_PRESET}'",
              "excludePatterns": "'${EXCLUDE_PATTERNS}'"
            }'
    - echo "Checkmarx scan initiated."
  rules:
    - if: $CI_COMMIT_BRANCH == "main"


checkmarx_scan:
  stage: checkmarx
  script:
    - echo "Running Checkmarx scan for ${REPOSITORY_NAME}..."
    - ./cx_console.sh -ProjectName "TWMS-Bobcat-IRW-SonarQubeScan" \
        -CxServer "https://cxscan.tavant.com/" \
        -CxUser "checkmarx" -CxPass "your_password" \
        -CxTimeout 3600 \
        -Incremental \
        -Exclusions "!**/node_modules/**,!**/*.class" \
        -PresetID 36 \
        -OutputPath "reports/"
  artifacts:
    paths:
      - reports/
    when: always

