
image: maven:3.3.9-jdk-8

variables:
  GITHUB_REPO: "git@github.com:DoosanICA/db-irw.git"
  REPOSITORY_NAME: "db-irw"
  DEFAULT_BRANCH:
    value: "develop"
    description: "Enter the branch name"
  DependecyCheckRequired:
    description: "Select the option"
    value: "true"  # Default value
    options:
      - "flase"
      - "true"
  SonarQubeScanner:
    description: "Select the option"
    value: "true"  # Default value
    options:
      - "flase"
      - "true"
  Checkmarx:
    description: "Select the option"
    value: "true"  # Default value
    options:
      - "flase"
      - "true"
  MAVEN_SETTINGS_PATH: /home/gitlab-runner/maven-settings-files/twms-bobcat-irw-setting.xml -U clean install -Dmaven.test.skip=true
  MAVEN_REPO_LOCAL: /home/gitlab-runner/maven-settings-files/twms_bobcat_irw
  DEPENDENCY_CHECK_VERSION: "8.0.0"
  SONARQUBE_SCANNER_VERSION: "3.2.0"
  SONARQUBE_SERVER_URL: 
  SONARQUBE_PROJECT_KEY: "TWMS-Bobcat-IRW"
  CHECKMARX_REPOSITORY_NAME: "TWMS-Bobcat-IRW-SonarQubeScan"
  CHECKMARX_TEAM: "\\CxServer"
  CHECKMARX_PRESET: "Checkmarx Default"
  EXCLUDE_PATTERNS: '!**/_cvs/**/*, !**/.svn/**/*, !**/.hg/**/*, !**/.git/**/*, !**/.bzr/**/*, !**/.gitgnore/**/*, !**/.gradle/**/*, !**/.checkstyle/**/*, !**/.classpath/**/*, !**/bin/**/*, !**/obj/**/*, !**/backup/**/*, !**/.idea/**/*, !**/*.DS_Store, !**/*.ipr, !**/*.iws, !**/*.bak, !**/*.tmp, !**/*.aac, !**/*.aif, !**/*.iff, !**/*.m3u, !**/*.mid, !**/*.mp3, !**/*.mpa, !**/*.ra, !**/*.wav, !**/*.wma, !**/*.3g2, !**/*.3gp, !**/*.asf, !**/*.asx, !**/*.avi, !**/*.flv, !**/*.mov, !**/*.mp4, !**/*.mpg, !**/*.rm, !**/*.swf, !**/*.vob, !**/*.wmv, !**/*.bmp, !**/*.gif, !**/*.jpg, !**/*.png, !**/*.psd, !**/*.tif, !**/*.swf, !**/*.jar, !**/*.zip, !**/*.rar, !**/*.exe, !**/*.dll, !**/*.pdb, !**/*.7z, !**/*.gz, !**/*.tar.gz, !**/*.tar, !**/*.gz, !**/*.ahtm, !**/*.ahtml, !**/*.fhtml, !**/*.hdm, !**/*.hdml, !**/*.hsql, !**/*.ht, !**/*.hta, !**/*.htc, !**/*.htd, !**/*.war, !**/*.ear, !**/*.htmls, !**/*.ihtml, !**/*.mht, !**/*.mhtm, !**/*.mhtml, !**/*.ssi, !**/*.stm, !**/*.bin, !**/*.lock, !**/*.svg, !**/*.obj, !**/*.stml, !**/*.ttml, !**/*.txn, !**/*.xhtm, !**/*.xhtml, !**/*.class, !**/*.iml, !Checkmarx/Reports/*.*, !OSADependencies.json, !**/node_modules/**, !**/help/**, !**/vendor/**, !**/*.bat, !**/*.vm, !**/*.properties, !**/*.jrxml, !**/*.jasper, !**/*.xsl, !**/dbpatches/**/*'

            
stages:
  - clone
  - dependency-check
  - sonar-analysis
  - checkmarx-scan


clone_job:
  stage: clone
  tags:
    - Linux
  before_script:
    - |
      mkdir -p ~/.ssh
      echo "$SSH_PRIVATE_KEY" | tr -d '\r' > ~/.ssh/id_rsa
      chmod 600 ~/.ssh/id_rsa
      ssh-keyscan -H github.com >> ~/.ssh/known_hosts
      ssh -T git@github.com || true
 
  script:
    - git clone --branch $DEFAULT_BRANCH $GITHUB_REPO
    - cp dependency_check.sh sonarqube_analysis.sh $REPOSITORY_NAME/
    - cd $REPOSITORY_NAME
    - chmod +x *.sh
    - export GIT_COMMIT=$(git rev-parse HEAD)  # Get latest commit hash from the cloned repository
    - echo "Revision:$GIT_COMMIT"  
    ##Build
    # - mvn -s $MAVEN_SETTINGS_PATH -Dmaven.repo.local=$MAVEN_REPO_LOCAL -f integration/bods/pom.xml
    # - mvn -s $MAVEN_SETTINGS_PATH -Dmaven.repo.local=$MAVEN_REPO_LOCAL -f integration/server/pom.xml
    # - mvn -s $MAVEN_SETTINGS_PATH -Dmaven.repo.local=$MAVEN_REPO_LOCAL -DbuildNumber=${CI_COMMIT_SHA} -DreleaseVersion=${RELEASE_VERSION} -P dailyqabuild
    
    ##Dependency Check
    # - |
    #   if [[ "$DependecyCheckRequired" == "true" ]]; then
    #     ./dependency_check.sh "${DEPENDENCY_CHECK_VERSION}" "${REPOSITORY_NAME}"
    #   else
    #       echo "Dependency Check not required, skipping..."
    #   fi
    - |
      curl -X POST "https://cxscan.tavant.com/CxWebClient/" -H "Content-Type: application/json"  -d '{
           "username": "checkmarx",
           "password": "!23"
         }'  -o response.html && \
        echo "Response saved to response.html" && \
        cat response.html

      SECURITY_TOKEN=$(grep -oP '(?<=id="SecurityIdentityToken" value=")[^"]*' response.html)
      if [ -z "$SECURITY_TOKEN" ]; then
        echo "Error: SecurityIdentityToken not found in the response HTML."
        exit 1
      fi
      echo "Extracted SecurityIdentityToken: $SECURITY_TOKEN"


    - echo "Starting Checkmarx Scan..."
    - |
      curl -X POST "https://cxscan.tavant.com/CxRestAPI/sast/scans" \
        -H "Content-Type: application/json" \
        -H "SecurityIdentityToken: $SECURITY_TOKEN" \
        -d '{
             "project": "'"${CHECKMARX_REPOSITORY_NAME}"'",
             "team": "'"${CHECKMARX_TEAM}"'",
             "preset": "Default",
             "settings": {
               "sast": true
             }
           }'



    - echo "Checkmarx scan initiated."
    
    ##SonarQube
    # - |
    #   if [[ "$SonarQubeScanner" == "true" ]]; then
    #     ./sonarqube_analysis.sh 
    #   else
    #       echo "SonarQubeScanner Check not required, skipping..."
    #   fi
      

  artifacts:
    paths:
      - "$REPOSITORY_NAME/checkmarx_scan_report.json"
      - "$REPOSITORY_NAME/dependency-check-report-*"  
    when: always


